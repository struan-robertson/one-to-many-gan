[project]
name = "one-to-many-gan"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "clean-fid>=0.1.35",
    "gdown>=5.2.0",
    "matplotlib>=3.10.1",
    "numpy>=2.2.3",
    "pillow>=11.1.0",
    "pytorch-ada",
    "scipy>=1.15.2",
    "torch>=2.6.0",
    "torchvision>=0.21.0",
    "tqdm>=4.67.1",
]

[tool.uv.sources]
torch = [
  { index = "pytorch-cu126", marker = "sys_platform == 'linux' or sys_platform == 'win32'" },
]
torchvision = [
  { index = "pytorch-cu126", marker = "sys_platform == 'linux' or sys_platform == 'win32'" },
]
pytorch-ada = { git = "https://github.com/BenediktAlkin/pytorch-ada" }

[[tool.uv.index]]
name = "pytorch-cu126"
url = "https://download.pytorch.org/whl/cu126"
explicit = true

[tool.uv]
dev-dependencies = [
    "ipdb>=0.13.13",
    "ipython>=8.31.0",
    "pyright>=1.1.393",
]

[tool.ruff]
target-version = "py313"
respect-gitignore = true
line-length = 100

[tool.ruff.lint]
extend-select = [ "ALL" ]
extend-ignore = [
    "ANN",  # Type hinting, leave for basedpyright
    "FIX",  # Leave fixme for emacs
    "TD" ,  # Same with todo
    "T201", # print functions are fine
    "F821", # Both Pyright and ruff detect this
    "F722", # Incorrectly throwing errors with forward type annotations
    "F401", # Pyright conflict
    "B006", # Pyright conflict
    "PLR2004", # Using constant values in if statements is a common pattern for me
    "PLR0913", # Functional style programing for Jax requires a lot of arguments
    "INP001", # I dont always want to add an `__init__.py`
    "F841", # Pyright detects this
    "ARG001", # Pyright detects this
    "FBT001", # Bools are useful as arguments
    "E731", # Stay away from my lambda assignments
    "ARG002", # Pyright detects this
    "D107", # __init__ docstring is kinda covered by class docstring
    "D102", # Almost all methods in this project are __call__, which isn't really necessary to document
    "D209", # Docstring closing quotes appear to effect emacs indentation logic
    "D105", # The purpose of magic functions is implicit without a docstring
    "TRY003", # Bit of a crazy rule about raising exceptions
    "S108", # No need to warn about using tmp files
    "N812", # torch.functional as F not f
    "PLR0915", # Training loops can require many statements
    "S311", # I'm not doing any cryptography
    "TC006", # Cast is OK without quotes
    # Better handled by ruff linter https://docs.astral.sh/ruff/formatter/#format-suppression
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "COM812",
    "COM819",
    "ISC002",
]

# Fix for https://github.com/astral-sh/uv/issues/11945
[[tool.uv.dependency-metadata]]
name = "torch"
version = "2.6.0+cu126"
requires-python = ">=3.9.0"
requires-dist = [
    'filelock',
    'typing-extensions>=4.10.0',
    'setuptools; python_version >= "3.12"',
    'sympy==1.13.1; python_version >= "3.9"',
    'networkx',
    'jinja2',
    'fsspec',
    'nvidia-cuda-nvrtc-cu12==12.6.77; platform_system == "Linux" and platform_machine == "x86_64"',
    'nvidia-cuda-runtime-cu12==12.6.77; platform_system == "Linux" and platform_machine == "x86_64"',
    'nvidia-cuda-cupti-cu12==12.6.80; platform_system == "Linux" and platform_machine == "x86_64"',
    'nvidia-cudnn-cu12==9.5.1.17; platform_system == "Linux" and platform_machine == "x86_64"',
    'nvidia-cublas-cu12==12.6.4.1; platform_system == "Linux" and platform_machine == "x86_64"',
    'nvidia-cufft-cu12==11.3.0.4; platform_system == "Linux" and platform_machine == "x86_64"',
    'nvidia-curand-cu12==10.3.7.77; platform_system == "Linux" and platform_machine == "x86_64"',
    'nvidia-cusolver-cu12==11.7.1.2; platform_system == "Linux" and platform_machine == "x86_64"',
    'nvidia-cusparse-cu12==12.5.4.2; platform_system == "Linux" and platform_machine == "x86_64"',
    'nvidia-cusparselt-cu12==0.6.3; platform_system == "Linux" and platform_machine == "x86_64"',
    'nvidia-nccl-cu12==2.21.5; platform_system == "Linux" and platform_machine == "x86_64"',
    'nvidia-nvtx-cu12==12.6.77; platform_system == "Linux" and platform_machine == "x86_64"',
    'nvidia-nvjitlink-cu12==12.6.85; platform_system == "Linux" and platform_machine == "x86_64"',
    'triton==3.2.0; platform_system == "Linux" and platform_machine == "x86_64"',
    'optree>=0.13.0; extra == "optree"',
    'opt-einsum>=3.3; extra == "opt-einsum"',
]
provides-extras = [
    'optree',
    'opt-einsum'
]
